# Muen Development Environment
#
# Prerequisites for nested emulation:
#   - Linux kernel >= 5.2.0 with CR3 fix:
#     https://patchwork.kernel.org/patch/11165185/
#
# Build container:
#   docker build -t muen-dev-env -f Dockerfile.muen-dev-env .
#
# Enter the container:
#   ./run.muen-dev-env muen-dev-env

# Base image
ARG distro_name=debian
ARG distro_version=bookworm
FROM ${distro_name}:${distro_version}

LABEL maintainer "Adrian-Ken Rueegsegger <ken@codelabs.ch>"
LABEL description "This image provides the build environment for the Muen project"

# Required packages
ARG packages="acpica-tools amtterm autoconf automake autopoint bc bison bzip2 \
ca-certificates ccache cpio curl file flex git-core gnupg inotify-tools \
iputils-ping kmod lcov libc6-dev libcurl4-gnutls-dev libelf-dev \
libfreetype6-dev libgmp10-dev libiberty-dev libncurses-dev libseccomp-dev \
libssl-dev libxml2-utils lighttpd make mtools openssh-client patch picocom \
pkg-config python3-minimal python3-lxml python3-colorlog python3-setuptools \
python3-pip python3-rangehttpserver python3-wheel qemu-system-x86 rsync \
screen tidy unzip vim wget xfonts-unifont xorriso xsltproc xxd xz-utils \
zlib1g-dev"

# Build-time only. Will not appear on the muen.sk website
# Required to compile amtc/solo5
ARG build_packages="gcc"

# Additional, not strictly required packages. Will not appear on the muen.sk
# website
ARG packages="$packages $build_packages php-cli php-curl php-xml"

# Install dependencies
RUN apt-get update && \
	DEBIAN_FRONTEND=noninteractive apt-get install -qq -y \
	--no-install-recommends \
	$packages \
	&& rm -rf /var/lib/apt/lists/*

# Alire
RUN wget --no-verbose https://github.com/alire-project/alire/releases/download/v1.2.1/alr-1.2.1-bin-x86_64-linux.zip -P /tmp/alr \
	&& (cd /tmp/alr && unzip alr-1.2.1-bin-x86_64-linux.zip && cp bin/alr /usr/local/bin) \
	&& rm -rf /tmp/alr

# amtc tool
RUN git clone https://github.com/schnoddelbotz/amtc.git /tmp/amtc \
	&& cd /tmp/amtc \
	&& make -j`nproc` amtc \
	&& cp src/amtc /usr/local/bin \
	&& rm -rf /tmp/amtc

# Install solo5. test_hello.muen is required by Github Actions CI.
RUN curl -sSL "https://github.com/Solo5/solo5/releases/download/v0.8.0/solo5-v0.8.0.tar.gz" -o /opt/solo5-v0.8.0.tar.gz \
	&& tar -C /opt -zxf /opt/solo5-v0.8.0.tar.gz \
	&& cd /opt/solo5-v0.8.0 \
	&& ./configure.sh \
	&& make -j`nproc`\
	&& make install-tools \
	&& rm /opt/solo5-v0.8.0.tar.gz

# Phabricator's arcanist for review workflow
RUN git clone https://github.com/codelabs-ch/arcanist.git /opt/arcanist

# Python modules
ARG distro_name
RUN pip3 install $(if [ "$distro_name" = "debian" ]; then echo --break-system-packages; fi) lief

# Purge build-time packages
RUN apt-get --purge autoremove -y $build_packages

# Setup environment
ENV HOME /home/user
ENV LANG C.UTF-8
ENV PATH /opt/arcanist/bin:$PATH

RUN useradd --create-home --home-dir $HOME user -G dialout \
	&& chmod 755 /home/user

# Alire 'meta' crate for the Muen toolchain
ARG dev_env_rev=38fac6533c3251e7cc67e5b16fcc5a9775c1d9cc
RUN git clone https://git.codelabs.ch/alire/muen-dev-env.git /opt/dev-env.alr \
	&& cd /opt/dev-env.alr \
	&& git reset --hard $dev_env_rev \
	&& make

WORKDIR $HOME
USER user

COPY entrypoint.muen-dev-env /usr/local/bin/entrypoint
ENTRYPOINT [ "entrypoint" ]
CMD [ "bash" ]
