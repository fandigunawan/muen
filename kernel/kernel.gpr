--
--  Copyright (C) 2013-2015  Reto Buerki <reet@codelabs.ch>
--  Copyright (C) 2013-2015  Adrian-Ken Rueegsegger <ken@codelabs.ch>
--
--  This program is free software: you can redistribute it and/or modify
--  it under the terms of the GNU General Public License as published by
--  the Free Software Foundation, either version 3 of the License, or
--  (at your option) any later version.
--
--  This program is distributed in the hope that it will be useful,
--  but WITHOUT ANY WARRANTY; without even the implied warranty of
--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
--  GNU General Public License for more details.
--
--  You should have received a copy of the GNU General Public License
--  along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

with "../config/shared";
with "../policy/obj/policy";

project Kernel is

   type Build_Type is ("debug", "release", "prove");
   Build_Mode : Build_Type := external ("build", "prove");

   type Proof_Type is ("limited", "complete");
   Proof_Mode : Proof_Type := external ("proofs", "limited");

   Extra_Dirs := ("../common/crash_audit");
   Extra_Languages := ();
   Extra_Warning_Switches := ();
   Extra_Compiler_Switches := ();
   Preprocessor_Switches := ();
   MCU_Pkg := "";

   case Build_Mode is
      when "debug" =>
         Extra_Dirs := Extra_Dirs
           & ("../common/" & Build_Mode, "../common/strings/impl",
              Build_Mode, Build_Mode & "/console/" & Policy.Debug_Type);
         Extra_Languages := ("Asm_Cpp");
         Preprocessor_Switches :=
           ("-gnateDRelease_Warnings=Ignored_Warnings");
         Extra_Warning_Switches := Shared.Build_Warning_Switches;

      when "release" =>
         Extra_Dirs := Extra_Dirs & ("../common/strings/empty", Build_Mode);
         Extra_Languages := ("Asm_Cpp");
         Preprocessor_Switches :=
           ("-gnateDRelease_Warnings=Warnings");
         Extra_Warning_Switches := Shared.Build_Warning_Switches;
         Extra_Compiler_Switches := ("-O2");

      when "prove" =>
         Extra_Dirs := Extra_Dirs
           & ("../common/strings/empty", "release", "spark");
         Preprocessor_Switches :=
           ("-gnateDRelease_Warnings=Warnings");
   end case;

   case Proof_Mode is
      when "limited" =>
         Preprocessor_Switches := Preprocessor_Switches &
         ("-gnateDComplete_Proofs=Off");

      when "complete" =>
         Preprocessor_Switches := Preprocessor_Switches &
         ("-gnateDComplete_Proofs=On");
   end case;

   case Policy.Has_Multiple_Major_Frames is
      when "True" =>
         case Build_Mode is
            when "debug"
               | "release" =>
               Preprocessor_Switches := Preprocessor_Switches &
               ("-gnateDMajor_Frame_Warnings=Ignored_Warnings");
            when "prove" =>
               Preprocessor_Switches := Preprocessor_Switches &
               ("-gnateDMajor_Frame_Warnings=Warnings");
         end case;
      when "False" =>
         Preprocessor_Switches := Preprocessor_Switches &
         ("-gnateDMajor_Frame_Warnings=Warnings");
   end case;

   case Policy.MCU_Enabled is
      when "True"  => MCU_Pkg := "enabled";
      when "False" => MCU_Pkg := "disabled";
   end case;

   for Languages use ("Ada") & Extra_Languages;

   for Source_Dirs use
     ("../common/src",
      "../common/muschedinfo",
      "../common/mutimedevents",
      "../policy/obj",
      "src/**") &
     Extra_Dirs;

   for Object_Dir use "obj/" & Build_Mode;

   for Main use ("init");

   package Builder is
      for Executable ("init.S") use "kernel";
      for Global_Configuration_Pragmas use "../config/restrictions.adc";
   end Builder;

   package Compiler is
      for Default_Switches ("Ada") use Shared.No_FPU_Switches
        & Shared.Spark_Compiler_Switches
        & Extra_Compiler_Switches
        & Preprocessor_Switches
        & Shared.Warning_Switches
        & Extra_Warning_Switches;
      for Local_Configuration_Pragmas use "../config/restrictions-" & Build_Mode & ".adc";
   end Compiler;

   package Linker is
      for Default_Switches ("Asm_Cpp") use Shared.Spark_Linker_Switches;
   end Linker;

   package Naming is
      for Body_Suffix ("Asm_Cpp") use ".S";
      for Body ("SK.MCU") use "sk-mcu__" & MCU_Pkg & ".adb";
      case Build_Mode is
         when "debug" =>
            for Spec ("SK.UART.State") use "sk-uart-state__globaldata.ads";
      end case;
   end Naming;

end Kernel;
